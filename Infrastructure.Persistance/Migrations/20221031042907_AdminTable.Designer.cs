// <auto-generated />
using System;
using Infrastructure.Persistance.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(AdminApplicationDbContext))]
    [Migration("20221031042907_AdminTable")]
    partial class AdminTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Admins.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6c09286-5f65-450e-92d9-cc9048089488"),
                            FirstName = "Админ",
                            LastName = "Админов",
                            Login = "admin",
                            MiddleName = "Админович",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Albums.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "17",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c7b12644-83a9-4ccd-8418-808b11d9755e"),
                            Code = 0,
                            IsActive = false,
                            Name = "Whole Lotta Red",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            Code = 0,
                            IsActive = false,
                            Name = "RED & WHITE",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f7c43f96-79e4-4244-b21b-8ac476e54495"),
                            Code = 0,
                            IsActive = false,
                            Name = "Life Of Pi'erre 5",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Albums.AlbumGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("GenreId");

                    b.ToTable("AlbumGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("19925006-4a04-4b32-95e5-c283547c4a99"),
                            AlbumId = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            GenreId = new Guid("ae14797c-31cd-432a-b2de-b3db95a82ab4")
                        },
                        new
                        {
                            Id = new Guid("b22e669a-9c66-486d-b17d-a14c1a243e44"),
                            AlbumId = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            GenreId = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892")
                        },
                        new
                        {
                            Id = new Guid("687ca407-81da-4e21-bdcb-175150f9fbc8"),
                            AlbumId = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            GenreId = new Guid("2f044c88-a983-4cf5-bcc1-a5d7764507ed")
                        },
                        new
                        {
                            Id = new Guid("406c6f12-d205-42f2-bd59-98c2e80336ed"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            GenreId = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892")
                        },
                        new
                        {
                            Id = new Guid("8f019ec0-8607-4075-88d3-9a76a0c09086"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            GenreId = new Guid("baa56e06-9672-4118-aee3-4098cec4581e")
                        },
                        new
                        {
                            Id = new Guid("f016e467-2350-4479-9000-67895ae047de"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            GenreId = new Guid("e2a8929f-2190-4329-bae1-83b170a3677f")
                        },
                        new
                        {
                            Id = new Guid("6ccef85d-6f33-4de8-ae65-170be59e564e"),
                            AlbumId = new Guid("c7b12644-83a9-4ccd-8418-808b11d9755e"),
                            GenreId = new Guid("ae14797c-31cd-432a-b2de-b3db95a82ab4")
                        },
                        new
                        {
                            Id = new Guid("335ad4a7-78c5-4774-a6ad-2083fc4384a3"),
                            AlbumId = new Guid("c7b12644-83a9-4ccd-8418-808b11d9755e"),
                            GenreId = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892")
                        },
                        new
                        {
                            Id = new Guid("631b34b9-0615-4981-8572-c785af40474c"),
                            AlbumId = new Guid("f7c43f96-79e4-4244-b21b-8ac476e54495"),
                            GenreId = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Artists.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            Code = 0,
                            IsActive = false,
                            Name = "XXXtentacion"
                        },
                        new
                        {
                            Id = new Guid("a62f20f1-a42d-41cb-8c17-890cc61b4b14"),
                            Code = 0,
                            IsActive = false,
                            Name = "Playboi Carti"
                        },
                        new
                        {
                            Id = new Guid("03810320-12e9-435f-9d8b-473572074360"),
                            Code = 0,
                            IsActive = false,
                            Name = "Lil Uzi Vert"
                        },
                        new
                        {
                            Id = new Guid("d3179697-703d-4ee8-998d-7674119309a5"),
                            Code = 0,
                            IsActive = false,
                            Name = "Pi'erre Bourne"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Artists.ArtistAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtistAlbums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8b78b9f-26aa-439d-87f6-7eb58d2bba65"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5")
                        },
                        new
                        {
                            Id = new Guid("23471132-60e9-46e0-8cac-812ac8e695dc"),
                            AlbumId = new Guid("c7b12644-83a9-4ccd-8418-808b11d9755e"),
                            ArtistId = new Guid("a62f20f1-a42d-41cb-8c17-890cc61b4b14")
                        },
                        new
                        {
                            Id = new Guid("a1e1be27-5a13-4994-9a39-488f88ec0bfd"),
                            AlbumId = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            ArtistId = new Guid("03810320-12e9-435f-9d8b-473572074360")
                        },
                        new
                        {
                            Id = new Guid("37d86067-916e-40ff-a643-e2b6377b8cfe"),
                            AlbumId = new Guid("f7c43f96-79e4-4244-b21b-8ac476e54495"),
                            ArtistId = new Guid("d3179697-703d-4ee8-998d-7674119309a5")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Artists.ArtistTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("TrackId");

                    b.ToTable("ArtistTracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb075f83-1a7c-4320-8f22-779da55b1c95"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("8366834f-0278-46e2-8142-011813bda329")
                        },
                        new
                        {
                            Id = new Guid("5a27607e-3b19-4d19-893e-cdbcba715385"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("533b7e3d-9cfd-4731-8dda-a1d5a86ff80a")
                        },
                        new
                        {
                            Id = new Guid("4992f118-ede9-4952-82dc-33c7374d2106"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("1afe4a9e-7121-4b34-89a6-8db6e0b6ddad")
                        },
                        new
                        {
                            Id = new Guid("ba6f17cd-20fa-4740-a3e4-3d48b9ec9edc"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("f0c1326b-0646-46f4-966f-c10caa9c931b")
                        },
                        new
                        {
                            Id = new Guid("98b6a498-246e-44d6-8fe2-23c024ea86ad"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("492f70ab-f1de-4de4-93b3-8602df66b05a")
                        },
                        new
                        {
                            Id = new Guid("d85cb043-aeb2-4d8d-bb54-37ac4d96411a"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("baace2ca-c2c0-4cee-b129-53079d696059")
                        },
                        new
                        {
                            Id = new Guid("59c55a67-b54b-4c12-81f8-ad2e457e353c"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("84d5050b-a7b7-4c23-a2d1-93281183264a")
                        },
                        new
                        {
                            Id = new Guid("99e2083e-f4b3-4be1-8235-421fbaf57780"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("6d342342-ea26-40f4-aa92-420f3a943603")
                        },
                        new
                        {
                            Id = new Guid("c1fc22b2-401a-4c69-b66b-ec2cb4f20eb1"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("8e22b0a3-063e-40ae-976e-5b06f762c8ce")
                        },
                        new
                        {
                            Id = new Guid("93ab31f3-6b63-4b61-a3f7-00ba0ce3c393"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("77b75ed9-e6d2-4d47-84c9-58af10e455c1")
                        },
                        new
                        {
                            Id = new Guid("244fa02f-6fb0-4e90-be90-4817dea4adff"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("7fdfa190-66d6-43be-b2af-dbbd45052828")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae14797c-31cd-432a-b2de-b3db95a82ab4"),
                            Code = 0,
                            IsActive = false,
                            Name = "Трэп"
                        },
                        new
                        {
                            Id = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892"),
                            Code = 0,
                            IsActive = false,
                            Name = "Хип-Хоп"
                        },
                        new
                        {
                            Id = new Guid("baa56e06-9672-4118-aee3-4098cec4581e"),
                            Code = 0,
                            IsActive = false,
                            Name = "Эмо"
                        },
                        new
                        {
                            Id = new Guid("2f044c88-a983-4cf5-bcc1-a5d7764507ed"),
                            Code = 0,
                            IsActive = false,
                            Name = "Клауд-рэп"
                        },
                        new
                        {
                            Id = new Guid("e2a8929f-2190-4329-bae1-83b170a3677f"),
                            Code = 0,
                            IsActive = false,
                            Name = "Альтернативный рок"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tracks.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8366834f-0278-46e2-8142-011813bda329"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "The Explanation"
                        },
                        new
                        {
                            Id = new Guid("533b7e3d-9cfd-4731-8dda-a1d5a86ff80a"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Jocelyn Flores"
                        },
                        new
                        {
                            Id = new Guid("1afe4a9e-7121-4b34-89a6-8db6e0b6ddad"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Depression & Obsession"
                        },
                        new
                        {
                            Id = new Guid("f0c1326b-0646-46f4-966f-c10caa9c931b"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Everybody Dies In Their Nightmares"
                        },
                        new
                        {
                            Id = new Guid("492f70ab-f1de-4de4-93b3-8602df66b05a"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Revenge"
                        },
                        new
                        {
                            Id = new Guid("baace2ca-c2c0-4cee-b129-53079d696059"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Save Me"
                        },
                        new
                        {
                            Id = new Guid("84d5050b-a7b7-4c23-a2d1-93281183264a"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Dead Inside (Interlude)"
                        },
                        new
                        {
                            Id = new Guid("6d342342-ea26-40f4-aa92-420f3a943603"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Fuck Love feat. Trippie Redd"
                        },
                        new
                        {
                            Id = new Guid("8e22b0a3-063e-40ae-976e-5b06f762c8ce"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Carry On"
                        },
                        new
                        {
                            Id = new Guid("77b75ed9-e6d2-4d47-84c9-58af10e455c1"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Orlando"
                        },
                        new
                        {
                            Id = new Guid("7fdfa190-66d6-43be-b2af-dbbd45052828"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Ayala (Outro)"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Albums.AlbumGenre", b =>
                {
                    b.HasOne("Domain.Entities.Albums.Album", "Album")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Genres.Genre", "Genre")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Domain.Entities.Artists.ArtistAlbum", b =>
                {
                    b.HasOne("Domain.Entities.Albums.Album", "Album")
                        .WithMany("ArtistAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Artists.Artist", "Artist")
                        .WithMany("ArtistAlbums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Domain.Entities.Artists.ArtistTrack", b =>
                {
                    b.HasOne("Domain.Entities.Artists.Artist", "Artist")
                        .WithMany("ArtistTracks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tracks.Track", "Track")
                        .WithMany("ArtistTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Entities.Genres.Genre", b =>
                {
                    b.HasOne("Domain.Entities.Albums.Album", null)
                        .WithMany("Genres")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("Domain.Entities.Tracks.Track", b =>
                {
                    b.HasOne("Domain.Entities.Albums.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Domain.Entities.Albums.Album", b =>
                {
                    b.Navigation("AlbumGenres");

                    b.Navigation("ArtistAlbums");

                    b.Navigation("Genres");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Domain.Entities.Artists.Artist", b =>
                {
                    b.Navigation("ArtistAlbums");

                    b.Navigation("ArtistTracks");
                });

            modelBuilder.Entity("Domain.Entities.Genres.Genre", b =>
                {
                    b.Navigation("AlbumGenres");
                });

            modelBuilder.Entity("Domain.Entities.Tracks.Track", b =>
                {
                    b.Navigation("ArtistTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
