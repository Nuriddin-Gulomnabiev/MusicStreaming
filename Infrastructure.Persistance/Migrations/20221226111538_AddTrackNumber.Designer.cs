// <auto-generated />
using System;
using Infrastructure.Persistance.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistance.Migrations
{
    [DbContext(typeof(AdminApplicationDbContext))]
    [Migration("20221226111538_AddTrackNumber")]
    partial class AddTrackNumber
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Admins.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e54f0cd-21d9-406d-bf67-e3bce0ce1199"),
                            FirstName = "Админ",
                            LastName = "Админов",
                            Login = "admin",
                            MiddleName = "Админович",
                            Password = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Albums.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "17",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c7b12644-83a9-4ccd-8418-808b11d9755e"),
                            Code = 0,
                            IsActive = false,
                            Name = "Whole Lotta Red",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            Code = 0,
                            IsActive = false,
                            Name = "RED & WHITE",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("f7c43f96-79e4-4244-b21b-8ac476e54495"),
                            Code = 0,
                            IsActive = false,
                            Name = "Life Of Pi'erre 5",
                            ReleaseDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Albums.AlbumGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("GenreId");

                    b.ToTable("AlbumGenres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("262342b2-861e-4802-a54c-c84522188cd7"),
                            AlbumId = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            GenreId = new Guid("ae14797c-31cd-432a-b2de-b3db95a82ab4")
                        },
                        new
                        {
                            Id = new Guid("395d511c-4387-46e8-9868-f8be6ea5c517"),
                            AlbumId = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            GenreId = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892")
                        },
                        new
                        {
                            Id = new Guid("444757cc-64ec-46b3-a97b-6c31e25d7d18"),
                            AlbumId = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            GenreId = new Guid("2f044c88-a983-4cf5-bcc1-a5d7764507ed")
                        },
                        new
                        {
                            Id = new Guid("46e8fe85-9e9d-4ab1-b711-2a100f9402c6"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            GenreId = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892")
                        },
                        new
                        {
                            Id = new Guid("49318a5d-3a15-4ca5-8a26-71c5e0928bee"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            GenreId = new Guid("baa56e06-9672-4118-aee3-4098cec4581e")
                        },
                        new
                        {
                            Id = new Guid("631bc28a-fc2c-406e-9bd6-3dcd90ef2bf4"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            GenreId = new Guid("e2a8929f-2190-4329-bae1-83b170a3677f")
                        },
                        new
                        {
                            Id = new Guid("9788b398-eb7d-4f0a-a778-a595edf8764e"),
                            AlbumId = new Guid("c7b12644-83a9-4ccd-8418-808b11d9755e"),
                            GenreId = new Guid("ae14797c-31cd-432a-b2de-b3db95a82ab4")
                        },
                        new
                        {
                            Id = new Guid("c2d56b4f-1968-42e0-b95c-ceb4cd976ffd"),
                            AlbumId = new Guid("c7b12644-83a9-4ccd-8418-808b11d9755e"),
                            GenreId = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892")
                        },
                        new
                        {
                            Id = new Guid("f1279fe9-84d4-417e-8b5b-627e0b4e6029"),
                            AlbumId = new Guid("f7c43f96-79e4-4244-b21b-8ac476e54495"),
                            GenreId = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Artists.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            Code = 0,
                            IsActive = false,
                            Name = "XXXtentacion"
                        },
                        new
                        {
                            Id = new Guid("a62f20f1-a42d-41cb-8c17-890cc61b4b14"),
                            Code = 0,
                            IsActive = false,
                            Name = "Playboi Carti"
                        },
                        new
                        {
                            Id = new Guid("03810320-12e9-435f-9d8b-473572074360"),
                            Code = 0,
                            IsActive = false,
                            Name = "Lil Uzi Vert"
                        },
                        new
                        {
                            Id = new Guid("d3179697-703d-4ee8-998d-7674119309a5"),
                            Code = 0,
                            IsActive = false,
                            Name = "Pi'erre Bourne"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Artists.ArtistAlbum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtistAlbums");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30965a2d-b2eb-448b-bedb-56e56215f76f"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5")
                        },
                        new
                        {
                            Id = new Guid("86e9eb76-1f31-40b1-a655-6b7d6860a7bd"),
                            AlbumId = new Guid("c7b12644-83a9-4ccd-8418-808b11d9755e"),
                            ArtistId = new Guid("a62f20f1-a42d-41cb-8c17-890cc61b4b14")
                        },
                        new
                        {
                            Id = new Guid("87cb0a2e-63f3-491c-b164-eac43dd743f4"),
                            AlbumId = new Guid("62e05eec-dfed-462d-abfe-7489534fad8b"),
                            ArtistId = new Guid("03810320-12e9-435f-9d8b-473572074360")
                        },
                        new
                        {
                            Id = new Guid("994a42cd-1c68-4fdb-b2b1-f0e9f4ee44a5"),
                            AlbumId = new Guid("f7c43f96-79e4-4244-b21b-8ac476e54495"),
                            ArtistId = new Guid("d3179697-703d-4ee8-998d-7674119309a5")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Artists.ArtistTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("TrackId");

                    b.ToTable("ArtistTracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("034fe159-32db-4875-9131-6426134d2743"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("8366834f-0278-46e2-8142-011813bda329")
                        },
                        new
                        {
                            Id = new Guid("062c2665-7591-4c78-82da-da9fe95f2277"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("533b7e3d-9cfd-4731-8dda-a1d5a86ff80a")
                        },
                        new
                        {
                            Id = new Guid("1227371f-f8cb-409c-ae62-9a864ce52d62"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("1afe4a9e-7121-4b34-89a6-8db6e0b6ddad")
                        },
                        new
                        {
                            Id = new Guid("1d7ace2e-de9c-492a-b535-723fb24975cb"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("f0c1326b-0646-46f4-966f-c10caa9c931b")
                        },
                        new
                        {
                            Id = new Guid("38d003fd-762e-410b-b93c-3b4ef2ec39ca"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("492f70ab-f1de-4de4-93b3-8602df66b05a")
                        },
                        new
                        {
                            Id = new Guid("960c53c2-d34a-4692-9f2b-6d6fd1015868"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("baace2ca-c2c0-4cee-b129-53079d696059")
                        },
                        new
                        {
                            Id = new Guid("983414b0-1371-4327-bd66-684afc8e3d05"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("84d5050b-a7b7-4c23-a2d1-93281183264a")
                        },
                        new
                        {
                            Id = new Guid("d033186f-8ab5-435e-9874-5238e141b148"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("6d342342-ea26-40f4-aa92-420f3a943603")
                        },
                        new
                        {
                            Id = new Guid("dc4036b5-d7ef-4788-8b33-e21b42374005"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("8e22b0a3-063e-40ae-976e-5b06f762c8ce")
                        },
                        new
                        {
                            Id = new Guid("dc96bf29-f981-4cfe-9777-a459d0ab69db"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("77b75ed9-e6d2-4d47-84c9-58af10e455c1")
                        },
                        new
                        {
                            Id = new Guid("de175c65-a3a6-4204-a1b2-318abe039cee"),
                            ArtistId = new Guid("c878736d-da07-4401-ab27-2743d4e035c5"),
                            TrackId = new Guid("7fdfa190-66d6-43be-b2af-dbbd45052828")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Genres.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae14797c-31cd-432a-b2de-b3db95a82ab4"),
                            Code = 0,
                            IsActive = false,
                            Name = "Трэп"
                        },
                        new
                        {
                            Id = new Guid("8745e56f-b335-43fe-bd10-bad6bead0892"),
                            Code = 0,
                            IsActive = false,
                            Name = "Хип-Хоп"
                        },
                        new
                        {
                            Id = new Guid("baa56e06-9672-4118-aee3-4098cec4581e"),
                            Code = 0,
                            IsActive = false,
                            Name = "Эмо"
                        },
                        new
                        {
                            Id = new Guid("2f044c88-a983-4cf5-bcc1-a5d7764507ed"),
                            Code = 0,
                            IsActive = false,
                            Name = "Клауд-рэп"
                        },
                        new
                        {
                            Id = new Guid("e2a8929f-2190-4329-bae1-83b170a3677f"),
                            Code = 0,
                            IsActive = false,
                            Name = "Альтернативный рок"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tracks.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Code"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8366834f-0278-46e2-8142-011813bda329"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "The Explanation",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("533b7e3d-9cfd-4731-8dda-a1d5a86ff80a"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Jocelyn Flores",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("1afe4a9e-7121-4b34-89a6-8db6e0b6ddad"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Depression & Obsession",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("f0c1326b-0646-46f4-966f-c10caa9c931b"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Everybody Dies In Their Nightmares",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("492f70ab-f1de-4de4-93b3-8602df66b05a"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Revenge",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("baace2ca-c2c0-4cee-b129-53079d696059"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Save Me",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("84d5050b-a7b7-4c23-a2d1-93281183264a"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Dead Inside (Interlude)",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("6d342342-ea26-40f4-aa92-420f3a943603"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Fuck Love feat. Trippie Redd",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("8e22b0a3-063e-40ae-976e-5b06f762c8ce"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Carry On",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("77b75ed9-e6d2-4d47-84c9-58af10e455c1"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Orlando",
                            Number = 0
                        },
                        new
                        {
                            Id = new Guid("7fdfa190-66d6-43be-b2af-dbbd45052828"),
                            AlbumId = new Guid("fe024194-aad4-462a-8fbd-8dd7b4a2cd90"),
                            Code = 0,
                            IsActive = false,
                            Name = "Ayala (Outro)",
                            Number = 0
                        });
                });

            modelBuilder.Entity("Domain.Entities.Albums.AlbumGenre", b =>
                {
                    b.HasOne("Domain.Entities.Albums.Album", "Album")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Genres.Genre", "Genre")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Domain.Entities.Artists.ArtistAlbum", b =>
                {
                    b.HasOne("Domain.Entities.Albums.Album", "Album")
                        .WithMany("ArtistAlbums")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Artists.Artist", "Artist")
                        .WithMany("ArtistAlbums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Domain.Entities.Artists.ArtistTrack", b =>
                {
                    b.HasOne("Domain.Entities.Artists.Artist", "Artist")
                        .WithMany("ArtistTracks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Tracks.Track", "Track")
                        .WithMany("ArtistTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Domain.Entities.Genres.Genre", b =>
                {
                    b.HasOne("Domain.Entities.Albums.Album", null)
                        .WithMany("Genres")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("Domain.Entities.Tracks.Track", b =>
                {
                    b.HasOne("Domain.Entities.Albums.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Domain.Entities.Albums.Album", b =>
                {
                    b.Navigation("AlbumGenres");

                    b.Navigation("ArtistAlbums");

                    b.Navigation("Genres");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Domain.Entities.Artists.Artist", b =>
                {
                    b.Navigation("ArtistAlbums");

                    b.Navigation("ArtistTracks");
                });

            modelBuilder.Entity("Domain.Entities.Genres.Genre", b =>
                {
                    b.Navigation("AlbumGenres");
                });

            modelBuilder.Entity("Domain.Entities.Tracks.Track", b =>
                {
                    b.Navigation("ArtistTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
